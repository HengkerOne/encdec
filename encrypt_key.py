
# SECURE PYTHON RUNTIME LOADER - Generated by HengkerOne
import marshal
import sys
import hashlib
import base64
import builtins
import hmac
import os
from cryptography.fernet import Fernet 
import binascii 

# ============================================================
# Ninja Toolkit - HengkerOne - Script Kiddie - SQLi Injection
# ------------------------------------------------------------------------------------------------------------------------
# Copyright (c) 2025 Ninja Toolkit Developers
# License: Ninja Toolkit
#
#THE SOFTWARE IS PROVIDED "HENGKERONE", WITHOUT WARRANTY OF ANY KIND.
# ============================================================

ITERATIONS = 600000
KEY_LEN = 44 
MASTER_KEY_LEN = 88
RANDOM_SALT_B64 = 'k66wSXCOZ+GxGGTqHoFpJA=='
PASSPHRASE_B64 = 'RW5jeXB0X0J5ZV9IZW5na2VyT25lQFNjcmlwdF9LaWRkaWUvcloh' 
HMAC_KEY_DERIVATION_SALT = b'HMAC_SALT_FOR_INTEGRITY'
OBFUSCATED_FERNET_KEY_HEX = "b5e8c8475fd7459323c9f422eaef1815266f7d9dfec86ec06f344054061b3bc9c59166317e54016267118b67"
ENCRYPTED_DATA_B64 = ""
EXPECTED_HMAC = "5a8ea9fe3868a0538350981edbadb4ccba14d65d3d6262f27928962ca472b5ba"

def check_debugger():
    if getattr(sys, 'gettrace')() is not None:
        return True
    try:
        with open('/proc/self/status', 'r') as f:
            if 'TracerPid:\t0' not in f.read():
                return True
    except Exception:
        pass
    return False

def master_key_derivation(salt_bytes, passphrase_bytes, iterations):
    master_key = hashlib.pbkdf2_hmac(
        'sha256', 
        passphrase_bytes, 
        salt_bytes, 
        iterations, 
        dklen=int(MASTER_KEY_LEN)
    )
    return master_key

if check_debugger():
    sys.exit(0)

try:
    PASSPHRASE_BYTES = base64.b64decode(PASSPHRASE_B64)
    RANDOM_SALT = base64.b64decode(RANDOM_SALT_B64)
    MASTER_KEY = master_key_derivation(RANDOM_SALT, PASSPHRASE_BYTES, ITERATIONS)
    
    FERNET_RAW_KEY = MASTER_KEY[:32]
    EXPECTED_FERNET_KEY = base64.urlsafe_b64encode(FERNET_RAW_KEY)
    XOR_KEY = MASTER_KEY[32:32 + int(KEY_LEN)] 

    obfuscated_key_bytes = bytes.fromhex(OBFUSCATED_FERNET_KEY_HEX)
    DE_OBFUSCATED_FERNET_KEY = bytes([a ^ b for a, b in zip(obfuscated_key_bytes, XOR_KEY)])
    
    if DE_OBFUSCATED_FERNET_KEY != EXPECTED_FERNET_KEY:
         raise ValueError("De-obfuscated key integrity check failed.")
         
    FERNET_KEY = DE_OBFUSCATED_FERNET_KEY 
    
    HMAC_KEY = hashlib.sha256(PASSPHRASE_BYTES + RANDOM_SALT + HMAC_KEY_DERIVATION_SALT).digest()
    
    final_cipher = Fernet(FERNET_KEY)

except Exception:
    sys.stderr.write("[-] Error Kunci: " + str(sys.exc_info()[1]) + "\n")
    sys.exit(1)

try:
    encrypted_data = base64.b64decode(ENCRYPTED_DATA_B64)

    current_hmac = hmac.new(HMAC_KEY, encrypted_data, hashlib.sha256).hexdigest()
    
    if not hmac.compare_digest(current_hmac, EXPECTED_HMAC):
        sys.stderr.write("[-] Deteksi Tampering Data (HMAC Failed). Menghentikan eksekusi.\n")
        sys.exit(1)
    
    decrypted_data = final_cipher.decrypt(encrypted_data)
    code_object = marshal.loads(decrypted_data)
    
    getattr(builtins, 'exec')(code_object)

except Exception:
    sys.stderr.write("[-] Gagal memulai runtime aman. Kode mungkin rusak atau dimodifikasi. \n")
    sys.exit(1)
